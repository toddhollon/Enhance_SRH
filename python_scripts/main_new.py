'''
Ideas for paper
1) Random noise generation
2) Empirical noise generator
    a) generated by tisse type
    b) across the entire dataset
    c) Local noise generator

'''

import numpy as np
from keras.layers import Input, Dense
from keras.models import Model
from keras.preprocessing.image import ImageDataGenerator
from keras.layers import Input, Dense, Conv2D, MaxPooling2D, UpSampling2D
from keras.models import Model
from keras import backend as K
import matplotlib.pyplot as plt
from model import unet


def uniform_noise_generator(batch, sigma = 25):
    # return image parameters
    batch_size, height, width, channels = batch.shape[0], batch.shape[1], batch.shape[2], batch.shape[3]

    # generate random uniform noise
    noise = np.random.random_sample(size=(batch_size, height, width, channels)) # [0,1]
    noise *= sigma
    
    return batch + noise

def gaussian_noise_generator(batch, sigma = 25):
    # return image parameters
    batch_size, height, width, channels = batch.shape[0], batch.shape[1], batch.shape[2], batch.shape[3]

    # generate random uniform noise
    noise = np.random.normal(loc=0.0, scale=sigma, size=(batch_size, height, width, channels))

    return batch + noise

def denoising_generator(generator, noise_function = gaussian_noise_generator):
    for batch in generator:
        noisy_batch = noise_function(batch) 
        yield noisy_batch, batch

def nio_preprocessing_function(image):
    """
    Channel-wise means calculated over NIO dataset
    """
    image[:,:,0] -= 102.1
    image[:,:,1] -= 91.0
    image[:,:,2] -= 101.5
    return image


if __name__ == "__main__":
    
    training_directory = ""

    HEIGHT = 256
    WIDTH = 256 
    BATCH_SIZE = 32

    # Define the 
    train_generator = ImageDataGenerator(
        horizontal_flip=True,
        vertical_flip=True,
        preprocessing_function = nio_preprocessing_function,
        data_format = "channels_last").flow_from_directory(directory = training_directory, 
        target_size = (HEIGHT, WIDTH), interpolation = "bicubic", color_mode = 'rgb', classes = None, class_mode = None, 
        batch_size = BATCH_SIZE, shuffle = True)
    #    save_to_dir = "/home/orringer-lab/Desktop/keras_save_dir")

    Unet = unet(input_size = (HEIGHT, WIDTH))
    
    autoencoder.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

    autoencoder.fit_generator(denoising_generator(train_generator),
                    epochs=10,
                    steps_per_epoch=600,
                    shuffle=True)
